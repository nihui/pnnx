diff -Nuarp vision-0.11.1/CMakeLists.txt vision-0.11.1-ops-only/CMakeLists.txt
--- vision-0.11.1/CMakeLists.txt	2021-10-22 00:16:22.000000000 +0800
+++ vision-0.11.1-ops-only/CMakeLists.txt	2022-01-05 14:05:26.227901325 +0800
@@ -12,11 +12,7 @@ if(WITH_CUDA)
   set(CMAKE_CUDA_FLAGS "${CMAKE_CUDA_FLAGS} --expt-relaxed-constexpr")
 endif()
 
-find_package(Python3 COMPONENTS Development)
-
 find_package(Torch REQUIRED)
-find_package(PNG REQUIRED)
-find_package(JPEG REQUIRED)
 
 function(CUDA_CONVERT_FLAGS EXISTING_TARGET)
     get_property(old_flags TARGET ${EXISTING_TARGET} PROPERTY INTERFACE_COMPILE_OPTIONS)
@@ -60,8 +56,8 @@ include(GNUInstallDirs)
 include(CMakePackageConfigHelpers)
 
 set(TVCPP torchvision/csrc)
-list(APPEND ALLOW_LISTED ${TVCPP} ${TVCPP}/io/image ${TVCPP}/io/image/cpu ${TVCPP}/models ${TVCPP}/ops
-  ${TVCPP}/ops/autograd ${TVCPP}/ops/cpu ${TVCPP}/io/image/cuda)
+list(APPEND ALLOW_LISTED ${TVCPP} ${TVCPP}/ops
+  ${TVCPP}/ops/autograd ${TVCPP}/ops/cpu)
 if(WITH_CUDA)
     list(APPEND ALLOW_LISTED ${TVCPP}/ops/cuda ${TVCPP}/ops/autocast)
 endif()
@@ -71,7 +67,7 @@ FOREACH(DIR ${ALLOW_LISTED})
 ENDFOREACH()
 
 add_library(${PROJECT_NAME} SHARED ${ALL_SOURCES})
-target_link_libraries(${PROJECT_NAME} PRIVATE ${TORCH_LIBRARIES} ${PNG_LIBRARY} ${JPEG_LIBRARIES} Python3::Python)
+target_link_libraries(${PROJECT_NAME} PRIVATE ${TORCH_LIBRARIES})
 set_target_properties(${PROJECT_NAME} PROPERTIES
   EXPORT_NAME TorchVision
   INSTALL_RPATH ${TORCH_INSTALL_PREFIX}/lib)
diff -Nuarp vision-0.11.1/torchvision/csrc/vision.cpp vision-0.11.1-ops-only/torchvision/csrc/vision.cpp
--- vision-0.11.1/torchvision/csrc/vision.cpp	2021-10-22 00:16:22.000000000 +0800
+++ vision-0.11.1-ops-only/torchvision/csrc/vision.cpp	2022-01-05 14:07:11.003900353 +0800
@@ -1,8 +1,5 @@
 #include "vision.h"
 
-#ifndef MOBILE
-#include <Python.h>
-#endif
 #include <torch/library.h>
 
 #ifdef WITH_CUDA
@@ -12,15 +9,6 @@
 #include <hip/hip_runtime.h>
 #endif
 
-// If we are in a Windows environment, we need to define
-// initialization functions for the _custom_ops extension
-#ifdef _WIN32
-PyMODINIT_FUNC PyInit__C(void) {
-  // No need to do anything.
-  return NULL;
-}
-#endif
-
 namespace vision {
 int64_t cuda_version() {
 #ifdef WITH_CUDA
