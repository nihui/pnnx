diff -Nuarp pytorch-v1.11.0/torch/csrc/jit/serialization/import.cpp pytorch-v1.11.0/torch/csrc/jit/serialization/import.cpp
--- pytorch-v1.11.0/torch/csrc/jit/serialization/import.cpp	2022-04-01 14:41:25.619730241 +0800
+++ pytorch-v1.11.0/torch/csrc/jit/serialization/import.cpp	2022-04-01 14:21:40.807114254 +0800
@@ -261,7 +261,7 @@ Module ScriptModuleDeserializer::deseria
     }
   }
   if (reader_->hasRecord("model.json") && code_prefix_.compare("code/") == 0) {
-#if !defined(C10_MOBILE) && !defined(C10_DISABLE_LEGACY_IMPORT)
+#if 0//!defined(C10_MOBILE) && !defined(C10_DISABLE_LEGACY_IMPORT)
     return torch::jit::LEGACY_deserialize(compilation_unit_, reader_, device_);
 #else
     AT_ERROR("Legacy model format is not supported on mobile.");
diff -Nuarp pytorch-v1.11.0/torch/csrc/jit/serialization/pickle.cpp pytorch-v1.11.0/torch/csrc/jit/serialization/pickle.cpp
--- pytorch-v1.11.0/torch/csrc/jit/serialization/pickle.cpp	2022-04-01 14:41:26.747725705 +0800
+++ pytorch-v1.11.0/torch/csrc/jit/serialization/pickle.cpp	2022-04-01 14:22:29.487813988 +0800
@@ -37,7 +37,7 @@ std::vector<char> pickle(
 // This has to live here instead of the C++ API to mirror torch.save since the
 // mobile build excludes the C++ API
 std::vector<char> pickle_save(const at::IValue& ivalue) {
-#ifndef C10_MOBILE
+#if 0//ndef C10_MOBILE
   // Pickle the IValue into an array of bytes
   std::vector<char> pickle_data;
   Pickler pickler([&](const char* buf, size_t size) {
