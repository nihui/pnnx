name: release
on: push

jobs:
  ubuntu:
    runs-on: ubuntu-18.04
    env:
      PACKAGENAME: pnnx-ubuntu
    steps:
    - name: pnnx-patches
      uses: actions/checkout@v2
      with:
        path: pnnx-patches
    - name: libtorch
      run: |
        wget https://download.pytorch.org/libtorch/cpu/libtorch-cxx11-abi-shared-with-deps-1.10.0%2Bcpu.zip
        unzip -q libtorch-cxx11-abi-shared-with-deps-1.10.0+cpu.zip
    - name: torchvision
      run: |
        wget https://github.com/pytorch/vision/archive/refs/tags/v0.11.1.zip -O vision-0.11.1.zip
        unzip -q vision-0.11.1.zip
        cd vision-0.11.1
        patch -p1 -i $GITHUB_WORKSPACE/pnnx-patches/vision-0.11.1-ops-only.patch
        mkdir -p build; cd build
        cmake -DCMAKE_INSTALL_PREFIX="$GITHUB_WORKSPACE/libtorch" -DTorch_DIR="$GITHUB_WORKSPACE/libtorch/share/cmake/Torch" -DCMAKE_BUILD_TYPE=Release ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: ncnn
      uses: actions/checkout@v2
      with:
        repository: Tencent/ncnn
        path: ncnn
    - name: build-pnnx
      run: |
        cd ncnn/tools/pnnx
        mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=install -DTorch_INSTALL_DIR="$GITHUB_WORKSPACE/libtorch" -DTorchVision_INSTALL_DIR="$GITHUB_WORKSPACE/libtorch" -DCMAKE_BUILD_TYPE=Release ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        cp ncnn/tools/pnnx/build/install/bin/pnnx ${{ env.PACKAGENAME }}
        cp libtorch/lib/*.so ${{ env.PACKAGENAME }}
        cp libtorch/lib/libgomp*.so* ${{ env.PACKAGENAME }}
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  macos:
    runs-on: macos-10.15
    env:
      PACKAGENAME: pnnx-macos
    steps:
    - name: pnnx-patches
      uses: actions/checkout@v2
      with:
        path: pnnx-patches
    - name: libtorch
      run: |
        wget https://download.pytorch.org/libtorch/cpu/libtorch-macos-1.10.0.zip
        unzip -q libtorch-macos-1.10.0.zip
    - name: torchvision
      run: |
        wget https://github.com/pytorch/vision/archive/refs/tags/v0.11.1.zip -O vision-0.11.1.zip
        unzip -q vision-0.11.1.zip
        cd vision-0.11.1
        patch -p1 -i $GITHUB_WORKSPACE/pnnx-patches/vision-0.11.1-ops-only.patch
        mkdir -p build; cd build
        cmake -DCMAKE_INSTALL_PREFIX="$GITHUB_WORKSPACE/libtorch" -DTorch_DIR="$GITHUB_WORKSPACE/libtorch/share/cmake/Torch" -DCMAKE_BUILD_TYPE=Release ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: ncnn
      uses: actions/checkout@v2
      with:
        repository: Tencent/ncnn
        path: ncnn
    - name: build-pnnx
      run: |
        cd ncnn/tools/pnnx
        mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=install -DTorch_INSTALL_DIR="$GITHUB_WORKSPACE/libtorch" -DTorchVision_INSTALL_DIR="$GITHUB_WORKSPACE/libtorch" -DCMAKE_BUILD_TYPE=Release ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        cp ncnn/tools/pnnx/build/install/bin/pnnx ${{ env.PACKAGENAME }}
        cp libtorch/lib/*.dylib ${{ env.PACKAGENAME }}
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  windows:
    runs-on: windows-2019
    env:
      PACKAGENAME: pnnx-windows
    steps:
    - name: pnnx-patches
      uses: actions/checkout@v2
      with:
        path: pnnx-patches
    - name: libtorch
      run: |
        Invoke-WebRequest -Uri https://download.pytorch.org/libtorch/cpu/libtorch-win-shared-with-deps-1.10.0%2Bcpu.zip -OutFile libtorch-win-shared-with-deps-1.10.0+cpu.zip
        7z x libtorch-win-shared-with-deps-1.10.0+cpu.zip
    - name: torchvision
      run: |
        Invoke-WebRequest -Uri https://github.com/pytorch/vision/archive/refs/tags/v0.11.1.zip -OutFile vision-0.11.1.zip
        7z x vision-0.11.1.zip
        cd vision-0.11.1
        C:\msys64\usr\bin\patch.exe -p1 -i $env:GITHUB_WORKSPACE\pnnx-patches\vision-0.11.1-ops-only.patch
        mkdir -p build; cd build
        cmake -DCMAKE_INSTALL_PREFIX="$env:GITHUB_WORKSPACE/libtorch" -DTorch_DIR="$env:GITHUB_WORKSPACE/libtorch/share/cmake/Torch" ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: ncnn
      uses: actions/checkout@v2
      with:
        repository: Tencent/ncnn
        path: ncnn
    - name: build-pnnx
      run: |
        cd ncnn/tools/pnnx
        mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=install -DTorch_INSTALL_DIR="$env:GITHUB_WORKSPACE/libtorch" -DTorchVision_INSTALL_DIR="$env:GITHUB_WORKSPACE/libtorch" ..
        cmake --build . --config Release -j 2
        cmake --build . --config Release --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        Copy-Item -Verbose -Path "ncnn\tools\pnnx\build\install\bin\pnnx.exe" -Destination ${{ env.PACKAGENAME }}
        Copy-Item -Verbose -Recurse -Path "libtorch\lib\*.dll" -Destination ${{ env.PACKAGENAME }}
        7z a -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip
