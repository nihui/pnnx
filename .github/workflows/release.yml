name: release
on:
  push:
    tags:
      - '*'

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.get_version.outputs.VERSION }}
    steps:
    - name: get-version
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}

  ubuntu:
    needs: [setup]
    runs-on: ubuntu-18.04
    env:
      PACKAGENAME: pnnx-${{ needs.setup.outputs.VERSION }}-ubuntu
    steps:
    - uses: actions/setup-python@v3
      with:
        python-version: '3.x'
    - name: pnnx-patches
      uses: actions/checkout@v3
      with:
        path: pnnx-patches
    - name: libtorch
      run: |
        wget https://github.com/pytorch/pytorch/releases/download/v1.11.0/pytorch-v1.11.0.tar.gz
        tar -xf pytorch-v1.11.0.tar.gz
        cd pytorch-v1.11.0
        pip install -r requirements.txt
        patch -p1 -i $GITHUB_WORKSPACE/pnnx-patches/pytorch-v1.11.0-fix-mobile-build.patch
        patch -p1 -i $GITHUB_WORKSPACE/pnnx-patches/pytorch-v1.11.0-no-link-system-lib.patch
        mkdir -p build; cd build
        cmake -DCMAKE_INSTALL_PREFIX="$GITHUB_WORKSPACE/libtorch" -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DBUILD_PYTHON=OFF -DUSE_KINETO=OFF -DUSE_BREAKPAD=OFF -DUSE_NUMPY=OFF -DUSE_CUDA=OFF -DUSE_DISTRIBUTED=OFF -DUSE_MKLDNN=OFF -DUSE_OPENMP=OFF -DUSE_XNNPACK=OFF -DINTERN_BUILD_MOBILE=ON -DINTERN_DISABLE_ONNX=ON -DINTERN_DISABLE_AUTOGRAD=ON -DBUILD_CAFFE2_OPS=OFF -DBUILD_CAFFE2_MOBILE=OFF -DBUILD_LITE_INTERPRETER=OFF -DUSE_SOURCE_DEBUG_ON_MOBILE=OFF -DUSE_LITE_INTERPRETER_PROFILER=OFF -DBUILD_CUSTOM_PROTOBUF=ON ..
        cmake --build . -j 2
        cmake --build . --target install/strip
    - name: torchvision
      run: |
        wget https://github.com/pytorch/vision/archive/refs/tags/v0.12.0.zip -O vision-0.12.0.zip
        unzip -q vision-0.12.0.zip
        cd vision-0.12.0
        patch -p1 -i $GITHUB_WORKSPACE/pnnx-patches/vision-0.12.0-ops-only.patch
        patch -p1 -i $GITHUB_WORKSPACE/pnnx-patches/vision-0.12.0-no-cuda-version.patch
        mkdir -p build; cd build
        cmake -DCMAKE_INSTALL_PREFIX="$GITHUB_WORKSPACE/libtorch" -DTorch_DIR="$GITHUB_WORKSPACE/libtorch/share/cmake/Torch" -DCMAKE_BUILD_TYPE=Release ..
        cmake --build . -j 2
        cmake --build . --target install/strip
    - name: ncnn
      uses: actions/checkout@v3
      with:
        repository: Tencent/ncnn
        path: ncnn
    - name: build-pnnx
      run: |
        cd ncnn/tools/pnnx
        mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=install -DTorch_INSTALL_DIR="$GITHUB_WORKSPACE/libtorch" -DTorchVision_INSTALL_DIR="$GITHUB_WORKSPACE/libtorch" -DCMAKE_BUILD_TYPE=Release ..
        cmake --build . -j 2
        cmake --build . --target install/strip
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        cp ncnn/tools/pnnx/build/install/bin/pnnx ${{ env.PACKAGENAME }}
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  macos:
    needs: [setup]
    runs-on: macos-10.15
    env:
      PACKAGENAME: pnnx-${{ needs.setup.outputs.VERSION }}-macos
    steps:
    - uses: actions/setup-python@v3
      with:
        python-version: '3.x'
    - name: pnnx-patches
      uses: actions/checkout@v3
      with:
        path: pnnx-patches
    - name: libtorch
      run: |
        wget https://github.com/pytorch/pytorch/releases/download/v1.11.0/pytorch-v1.11.0.tar.gz
        tar -xf pytorch-v1.11.0.tar.gz
        cd pytorch-v1.11.0
        pip install -r requirements.txt
        patch -p1 -i $GITHUB_WORKSPACE/pnnx-patches/pytorch-v1.11.0-fix-mobile-build.patch
        patch -p1 -i $GITHUB_WORKSPACE/pnnx-patches/pytorch-v1.11.0-no-link-system-lib.patch
        mkdir -p build; cd build
        cmake -DCMAKE_INSTALL_PREFIX="$GITHUB_WORKSPACE/libtorch" -DCMAKE_BUILD_TYPE=Release -DBUILD_SHARED_LIBS=OFF -DBUILD_PYTHON=OFF -DUSE_KINETO=OFF -DUSE_BREAKPAD=OFF -DUSE_NUMPY=OFF -DUSE_CUDA=OFF -DUSE_DISTRIBUTED=OFF -DUSE_MKLDNN=OFF -DUSE_OPENMP=OFF -DUSE_XNNPACK=OFF -DINTERN_BUILD_MOBILE=ON -DINTERN_DISABLE_ONNX=ON -DINTERN_DISABLE_AUTOGRAD=ON -DBUILD_CAFFE2_OPS=OFF -DBUILD_CAFFE2_MOBILE=OFF -DBUILD_LITE_INTERPRETER=OFF -DUSE_SOURCE_DEBUG_ON_MOBILE=OFF -DUSE_LITE_INTERPRETER_PROFILER=OFF -DBUILD_CUSTOM_PROTOBUF=ON ..
        cmake --build . -j 3
        cmake --build . --target install/strip
    - name: torchvision
      run: |
        wget https://github.com/pytorch/vision/archive/refs/tags/v0.12.0.zip -O vision-0.12.0.zip
        unzip -q vision-0.12.0.zip
        cd vision-0.12.0
        patch -p1 -i $GITHUB_WORKSPACE/pnnx-patches/vision-0.12.0-ops-only.patch
        patch -p1 -i $GITHUB_WORKSPACE/pnnx-patches/vision-0.12.0-no-cuda-version.patch
        mkdir -p build; cd build
        cmake -DCMAKE_INSTALL_PREFIX="$GITHUB_WORKSPACE/libtorch" -DTorch_DIR="$GITHUB_WORKSPACE/libtorch/share/cmake/Torch" -DCMAKE_BUILD_TYPE=Release ..
        cmake --build . -j 3
        cmake --build . --target install/strip
    - name: ncnn
      uses: actions/checkout@v3
      with:
        repository: Tencent/ncnn
        path: ncnn
    - name: build-pnnx
      run: |
        cd ncnn/tools/pnnx
        mkdir build && cd build
        cmake -DCMAKE_INSTALL_PREFIX=install -DTorch_INSTALL_DIR="$GITHUB_WORKSPACE/libtorch" -DTorchVision_INSTALL_DIR="$GITHUB_WORKSPACE/libtorch" -DCMAKE_BUILD_TYPE=Release ..
        cmake --build . -j 3
        cmake --build . --target install/strip
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        cp ncnn/tools/pnnx/build/install/bin/pnnx ${{ env.PACKAGENAME }}
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  windows:
    needs: [setup]
    runs-on: windows-2022
    env:
      PACKAGENAME: pnnx-${{ needs.setup.outputs.VERSION }}-windows
    defaults:
      run:
        shell: msys2 {0}
    steps:
    - uses: actions/setup-python@v3
      with:
        python-version: '3.x'
    - uses: msys2/setup-msys2@v2
      with:
        msystem: mingw64
        update: true
        install: >-
          git
          make
          tar
          xz
          unzip
          patch
          python3-pip
        pacboy: >-
          toolchain:p
          cmake:p
          ninja:p
    - name: pnnx-patches
      uses: actions/checkout@v3
      with:
        path: pnnx-patches
    - name: libtorch
      run: |
        export MSYS=winsymlinks:lnk
        curl -L -O https://github.com/pytorch/pytorch/releases/download/v1.11.0/pytorch-v1.11.0.tar.gz
        tar -xf pytorch-v1.11.0.tar.gz
        cd pytorch-v1.11.0
        pip3 install -r requirements.txt
        patch -p1 -i $env:GITHUB_WORKSPACE\pnnx-patches\pytorch-v1.11.0-fix-mobile-build.patch
        patch -p1 -i $env:GITHUB_WORKSPACE\pnnx-patches\pytorch-v1.11.0-no-link-system-lib.patch
        patch -p1 -i $env:GITHUB_WORKSPACE\pnnx-patches\pytorch-v1.11.0-set-python-executable.patch
        mkdir -p build; cd build
        cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="$env:GITHUB_WORKSPACE/libtorch" -DBUILD_SHARED_LIBS=OFF -DBUILD_PYTHON=OFF -DUSE_KINETO=OFF -DUSE_BREAKPAD=OFF -DUSE_NUMPY=OFF -DUSE_CUDA=OFF -DUSE_DISTRIBUTED=OFF -DUSE_MKLDNN=OFF -DUSE_OPENMP=OFF -DUSE_XNNPACK=OFF -DINTERN_BUILD_MOBILE=ON -DINTERN_DISABLE_ONNX=ON -DINTERN_DISABLE_AUTOGRAD=ON -DBUILD_CAFFE2_OPS=OFF -DBUILD_CAFFE2_MOBILE=OFF -DBUILD_LITE_INTERPRETER=OFF -DUSE_SOURCE_DEBUG_ON_MOBILE=OFF -DUSE_LITE_INTERPRETER_PROFILER=OFF -DBUILD_CUSTOM_PROTOBUF=ON ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: torchvision
      run: |
        curl -L -O https://github.com/pytorch/vision/archive/refs/tags/v0.12.0.zip
        unzip -q vision-0.12.0.zip
        cd vision-0.12.0
        patch -p1 -i $env:GITHUB_WORKSPACE\pnnx-patches\vision-0.12.0-ops-only.patch
        patch -p1 -i $env:GITHUB_WORKSPACE\pnnx-patches\vision-0.12.0-no-cuda-version.patch
        mkdir -p build; cd build
        cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="$env:GITHUB_WORKSPACE/libtorch" -DTorch_DIR="$env:GITHUB_WORKSPACE/libtorch/share/cmake/Torch" ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: ncnn
      uses: actions/checkout@v3
      with:
        repository: Tencent/ncnn
        path: ncnn
    - name: build-pnnx
      run: |
        cd ncnn/tools/pnnx
        mkdir build && cd build
        cmake -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=install -DTorch_INSTALL_DIR="$env:GITHUB_WORKSPACE/libtorch" -DTorchVision_INSTALL_DIR="$env:GITHUB_WORKSPACE/libtorch" -DPNNX_BUILD_WITH_STATIC_CRT=ON ..
        cmake --build . -j 2
        cmake --build . --target install
    - name: package
      run: |
        mkdir ${{ env.PACKAGENAME }}
        cp ncnn\tools\pnnx\build\install\bin\pnnx.exe ${{ env.PACKAGENAME }}
        zip -9 -r ${{ env.PACKAGENAME }}.zip ${{ env.PACKAGENAME }}
    - name: upload
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PACKAGENAME }}
        path: ${{ env.PACKAGENAME }}.zip

  release:
    needs: [setup, ubuntu, macos, windows]
    runs-on: ubuntu-latest
    steps:
    - name: download
      uses: actions/download-artifact@v2
      with:
        path: artifacts

    - name: create-release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ needs.setup.outputs.VERSION }}
        release_name: Release ${{ needs.setup.outputs.VERSION }}
        draft: false
        prerelease: false

    - name: upload-pnnx-ubuntu
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: pnnx-${{ needs.setup.outputs.VERSION }}-ubuntu
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    - name: upload-pnnx-macos
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: pnnx-${{ needs.setup.outputs.VERSION }}-macos
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip

    - name: upload-pnnx-windows
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        PACKAGENAME: pnnx-${{ needs.setup.outputs.VERSION }}-windows
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: artifacts/${{ env.PACKAGENAME }}/${{ env.PACKAGENAME }}.zip
        asset_name: ${{ env.PACKAGENAME }}.zip
        asset_content_type: application/zip
